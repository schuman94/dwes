...........
....PHP....
...........

STRING
"" -> interpreta las secuencias de escape y las variables.
'' -> no interpreta.
Existiendo $h y $hola: "{$h}ola" consigue interpolar $h 
$c[0] indexa bytes en vez de posiciones. Hay carácteres que ocupan 2 bytes.
mb_strlen() devuelve la longitud de una cadena.
trim(), ltrim() y rtrim() elimina espacios.
str_repeat("cadena", 5)
mb_strpos("cadena", "d") devuelve la posicion de la primera ocurrencia de la substring.
mb_substr($c, 4, 1) se usa en vez de indexar con $c[]

...................................
Secuencias heredoc y nowdoc
...................................
$c = <<<EOT
asfjafjàwdeifjawefjaefjawedifj

weFJNAOWIFJPWJEOWEFWEIFJEWO
asdasd  	$x	dfdasgdfg \n
EOT;
...................................
<<<'EOT' indica que no interpola cadenas ni expande variables (nowdoc)
.........................................................................


ARRAYS
unset() elimina variables o elementos de un array
$array[] = 'a' añade un nuevo elemento al array en la siguiente posición con el indice siguiente al mas grande que se ha usado.
isset() comprueba si una variable o un elemento del array existe o es null.
array_key_exists() devuelve true si la clave existe en ese array.
array_search('a', $a) en un array devuelve la primera clave que contenga el valor indicado.
asort() ordena por valor un array y devuelve true.
count() te cuenta el numero de elementos del array.
empty() devuelve true si el array está vacio. Tambien se usa para cadenas pero detecta la cadena "0" como vacia tambien.
print_r() imprime un array que tiene dentro otros arrays.

CONSTANTES
define('PI', 3.14) (Antiguo)
const PI = 3.14   (Nuevo)
Preguntar si una variable está definida: defined('PI')

COMPROBACINES DE TIPOS
gettype() devuelve una cadena con el tipo de la expresión.
is_*() donde * es el nombre del tipo, pregunta si la expresion es de ese tipo.
var_dump() vuelca (no devuelve) a la salida el valor y el tipo de la expresion.
is_null()
is_numeric() util para que nos devuelva true si lo que hay dentro es una cadena pero en realidad es un numero.
ctype_*() comprueba si la cadena está compuesta por un tipo de caracteres (digitos, alfanumericos, alfabeticos, mayusculas, etc)

CONVERSIONES
(int) "4" => 4
intval() boolval() floatval() strval()

COMPARACIONES
?? es el coalesce de sql. null ?? 5 devuelve 5 (el primero que no sea nulo)
<=> (nave espacial) devuelve numero mayor que 0, menor o igual dependiendo de las expresiones de ambos lados.
== comparacion normal, pero === compara el tipo sin hacer conversion implicita.
$a ? $a : $b (operador ternario)  Hay una simplificación (operador elvis) $a ?: $b


Crear servidor con php
php -S 0.0.0.0:8000
Podemos añadirle la opcion -t para indicar el documentroot, sino, es la carpeta actual.

git config --global user.name ""
git config --global user.email ""

implode('-', [1,2,3,4]) Te devuelve una cadena de todos los elementos del array separados en este caso por un guion.
explode('&', 'x=5&y=7') Te devuelve un array formado por elementos de la cadena que han sido separados en este caso por un &.

$_GET es un array que contiene clave (cadena) y valor (cadena) de los parametros de la petición get.
$_SERVER es un array que contiene bastante información util.

<?php echo expresion ?> es igual que <?= expresion ?>

foreach (array as [$k =>] $v) {}

ESTRUCTURAS DE CONTROL ALTERNATIVAS
while(condicion):
	...
endwhile;

__________________________

for(expe1;expr2;expr3):
	...
endfor;

__________________________

foreach (array as $v):
	...
endforeach;

_________________________

if (condicion):
	...
else:
	...
elseif (condicion):
	...
endif;

PLANTILLAS
De esta forma separamos el backend del frontend
<?php if (isset($_GET['y'])): ?>
	<p>El valor del parametro x es <?= $_GET['x'] ?></p>
<?php endif ?>


Crear repositorio en github desde terminal:
gh repo create nombre
Hay que instalar cli/cli de github.

Extensiones necesarias:
PHP Intelephense

in_array(x,y) comprueba si x está en el array y.

Definir funcion:
function prueba($par1, $par2)
{
	return
}
En php el paso de argumentos es por valor. Cuando tu le metes una cadena a una funcion, 
luego no estas usando esa cadena sino una nueva con su mismo valor.
Esto no pasaba en python ni java, alli el paso de argumentos es por referencia cuando son objetos, 
si son valores primitivos si son por valor. En php las cadenas son tipos primitivos, los objetos si se
pasan por referencia.

En php podemos obligar a que el paso de parametros sea por referencia usando el &:
funcion prueba(&$x) 
Por ejemplo, los arrays se pasan por valor, pero si queremos modificar 
el propio array desde dentro de la funcion y no a la copia, hay que obligarlo a que se pase por referencia.

global $g => declarar una funcion global dentro de una funcion (no se recomienda hacerlo).

Variables superglobales: variables globales que no hace falta declarar como globales, como $_GET

DECLARACIÓN DE FUNCIONES:
function nombre(string $x, string $y): string 
No es necesario pero puedes declarar los tipos de los parametros y del retorno
(recuerda que aun así hay tipado debil, no es neceasrio que la funcion reciba el tipo exacto)
En el caso de que la funcion pueda devolver null aparte de String, se trata de un valor de tipo nullable
Se representa con el ?: function nombre(string $x, string $y): ?string
Si una funcion no devuelve nada se puede indicar con un void
Para indicar que un parametro o valor de retorno puede tener mas de un tipo: int|float
function nombre(string|int $x, string $y): int|float|null


Comentarios de documentacion (documentar funciones):
/**
* @param string		$par	El nombre del parametro 
* @param array		$array	El array de errores
* @return string|null		El valor del parametro o null si no es un numero
*/
Con el plugin phpdoc comment puedes documentar: f1 -> add documentation


Cargar un fichero php en una plantilla:
<?php
require 'fichero.php';


<form action="" method="GET">    Cuando no indicas el valor del action significa que es el propio archivo.

isset($x, $y, $z) comprueba si una variable o varias existen y no son nulas.



FECHAS Y HORAS:
DateTime
DateTimeZone
DateTimeInmutable
DateInterval
DatePeriod
DateTimeInterface

$dti = new DateTimeInmutable(); Los parentesis no son necesarios si no hay parametros, pero es mejor ponerlos.

Acceder a una propiedad("atributos") o metodo de un objeto: $dti->format(php:d-m-Y')

Formato ISO: 'P1D'  (1 día)  'P1Y4M' (1 año y 4 meses) Son parámetros para el objeto DateInterval.


Triple igual (===) para comparar objetos significa si los objetos son el mismo (su identidad), no que simplemente
sean iguales, osea con mismos atributos y demás (==)

Las constantes quedan guardadas en la propia clase, no en una instancia del objeto. Para acceder a una:
DateTime::ATOM    Los "::" son el operador de resolucion de ambito.

El operador =& para objetos $x =& $y
No crea una nueva variable que apunte al mismo objeto, sino que la ligadura de $x apunta a la misma variable que $y.
Entonces, si ahora $x = new Object(), ahora $y tambien apunta a ese nuevo objeto.

Con los operadoes .= podemos concatenar por atras a una variable. $ .= "gsogf"

operador clone: hace copia superficial del objeto. $v = clone $w 

$w instanceof DateTime   (devuelve true o false)

la funcion checkdate() valida una fecha 

$fecha = explode('-', $val);  devuelve un array donde sus elementos son strings resultantes de cortar por el separador '-'
Incluso podemos asignarlos a la vez: [$a, $m, $d] = $fecha; 

array_map(funcion, array) aplica una funcion a todos los elementos de un array, devolviendo un array nuevo.
El primer parametro es una cadena con el nombre de la funcion: 'trim' por ejemplo.
El segundo parametro es el array.

extract() es una función que recibe un array y crea variables, y si ya existian, les cambia el valor:
extract(['x' => 4, 'y' => 7]);
La funcion contraria es compact(), recibe cadenas con el nombre de las variables y devuelve el array.


funcion array_diff_key() devuelve un array con la diferencia entre dos arrays que reciba como parametros.
Se utilizan las claves para comparar, no lo valores.
Si utilizas esta funcion para comparar los dos arrays, primero poniendo uno el primero y luego alreves, puedes
detectar si ambos arrays tienen exactamente las mismas claves.

array_intersect_key() hace la intersección, aqui da igual cual pongas primero, y no tienes que ponerlo dos veces.
Devuelve un array con los elementos que comparten ambos arrays, y, OJO, el valor que le da a la clave es el del primerr array.


EXCEPCIONES
Errores y excepciones (ambos implementan la interfaz throwable)
Al capturar errores con catch puedes incluir varios entre parentesis separando con un |

Si en el codigo ponemos: declare(strict_types=1) arriba del todo al abrir la etiqueta php, ya da error si le pasamos
un parametro de un tipo diferente al que pide una funcion, no se hace conversion implicita (solo en llamadas a funciones).
Hay que ponerlo en el script que llama a la funcion, no el que la crea. Y arriba del todo, en la primera linea:
<?php declare(strict_types=1) ?>


Instalar postgresql
sudo apt install postgresql
sudo -u postgres createdb prueba
sudo -u postgres createuser -P prueba
pqsl -h localhost -U prueba -d prueba

Una vez tenemos un fichero con la creacion de la tabla:
psql -h localhost -U prueba -d prueba < prueba.sql

$pdo = new PDO('pgsql:host=localhost;dbname=prueba', 'prueba', 'prueba');
$sent = $pdo->query('SELECT * FROM depart');
$filas = $sent->fetchAll(); (No se utiliza porque almacena todas las filas y eso es una locura)
$fila = $sent->fetch(); Recogemos una fila (es como un next).
Mejor usar el foreach:
foreach ($sent as $fila) {
	...	
}
Configurar postgres /etc/postgres/14/main/postgresql.conf
#intervalstyle = 'iso_8691' (linea 695)
timezone = 'UTC' (linea 696)

(linea 709)
# These settings are initialized by initdb, but they can be changed.
lc_messages = 'en_US.UTF-8'			# locale for system error message
					# strings
lc_monetary = 'en_US.UTF-8'			# locale for monetary formatting
lc_numeric = 'en_US.UTF-8'			# locale for number formatting
lc_time = 'en_US.UTF-8'				# locale for time formatting

# default configuration for text search
default_text_search_config = 'pg_catalog.english'


Luego de modfiicar:
sudo systemctl restart postgresql.service



Cuando hacemos una consulta que devuelve un valor, osea una fila y una columna, como por ejemplo con la funcion count(*) from emple:
usamos $sent->fetchColumn(); y lo podemos guardar en una variable, ya solo es un dato, no es un array.

fetchColumn es como el fetch, pero devuelve el valor de la columna que indiques en vez de un array de toda la fila.

Para las consultas where, podemos usar LIKE O ILIKE para que encontremos por ejemplo manolo, poniendo solo man.
where nombre ilike '%$nombre%'  Los tanto porciento son como los asteriscos, cualquier cadena antes y despues de nombre.


implode une elementos de un array en un string

header('Location: index.php');  Con esto redireccionamos.

return o exit(0); Termina la ejecución de la funcion.

output-buffering (parametro de configuracion del buffer) en: /etc/php/8.0/cli/php.ini 

Existen varias funciones de php para filtrar y ahorrarnos código:
filter_input(INPUT_POST, 'nombre'); sustituye al codigo que teniamos con el isset() del $_POST

ctype_digit("cadena") devuelve true si todos los caracteres son dígitos.

fetch(PDO::FETCH_ASSOC) solo devuelve el array con las asociaciones, no por indices

Para añadir la extension pgcrypto (siendo administrador):
sudo -u postgres psql -d prueba
create extension pgcrypto;
Si se lo instalamos a template1, ya todas las que se creen la tendran

htmlspecialchars: escapamos la salida para solucionar el problema de seguridad XSS.
Le quitamos a los caracteres especiales su condicion de caracter especial.
Para ahorrar código nos podemos crear una funcion:
function hh($cadena)
{
	return htmlspecialchars($cadena, ENT_QUOTES | ENT_SUBSTITUTE);
}

Comentarios en SQL: --

CSRF: cross-site request forgery. Solucion crear token_csrf y la variable de sesion $SESSION['token_csrf'];
bin2hex(random_bytes(32)) genera una secuencia segura para el token

Para acceder a una constante declarada en una clase hay que usar el operador de resolucion de ambito, doble dos puntos:
nombreClase::CONSTANTE

en php para acceder a una propiedad de un objeto se utiliza el $this, osea como el this o self.
$this->propiedad
Sin embargo, el self tambien existe en php, pero no es una referencia al objeto sino a la clase. Por ejemplo, se usaria para
acceder a una constante: self::CONSTANTE 

Puedes convertir en array un objeto: (array) $objeto

Dentro del constructor de una clase que tiene padre, si necesitamos llamar al constructor del padre:
parent::__construct()

json_encode(array) te devuelve una cadena con notacion JSON apartir de un array
json_decode(cadena) convierte en objeto de la clase stdClass una cadena con forma de JSON

Enlace estatico en tiempo de ejecucion. Durante la ejecucion del programa se vinculan las funciones con el verdadero self.
Es decir ahora cuando ve la funcion con self, aunque esa funcion esté escrita en el padre, el self hace referencia a la instancia del hijo.
hay que poner static:: en vez de self::
public function imprimeCampos() {
	print_r(static::campos())
} 

En la documentacion de php viene la forma de resolver conflicto entre diferentes rasgos que use una clase

Si tu objeto implementa la interfaz iterable ya puede ser iterado por ejemplo con un bucle for,
tan solo tiene que implementar las funciones de la interfaz iterable.

contravarianza en los parametros y covarianza en el tipo de retorno:
El tipo de los parametros puede ser mas general en el hijo, y el tipo del valor de retorno puede ser mas específico en el hijo.
Como en php no hay sobrecarga de metodos, existe la covarianza en los parametros, pero en java lo que ocurriria es que seria otro metodo distinto.
En java no hay contravarianza pero en php. Covarianza si la hay, porque si da un tipo de retorno distinto, lo que se está haciendo es refefinir un metodo.

funciones anonimas, son como funciones lambdas:
function ($x) {return $x + 1;}
function ($x) use($j) {return $x + $j}  //Esto es una clausura, es decir, una funcion anonima que recuerda un valor ($j) pero 
el que tiene en ese momento cuando se ha creado, si $j luego, da igual, el valor que recuerda es el primero.

el array_map se puede usar con funciones, funciones anonimas, metodos de objetos y metodos estaticos de clases:
con una funcion seria... array_map('nombreFuncion', array);
con una funcion anonima seria... array_map(function ($x) {return $x; }, array);
con el método de un objeto seria...  array_map([$o, 'nombreMetodo'], array);
con un metodo estatico de clase seria... array_map(['nombreClase', 'nombreMetodo'], array);

Tambien existe el array_reduce (por ejemplo sumar todos los elementos de un array)

el call_user_func() es util como una funcion generica para llamar a callables. Es la manera generica de llamar a cualquier cosa que puedas llamar.
el call_user_func tiene como argumentos un callable y luego una serie de argumentos que son los que necesita el propio callable. Es como decir:
llama a esta funcion con estos argumentos. Pero estamos generalizando porque dependiendo de la situacion se llamará a un callable u otro.


(array) $o    ->    convierte en array el objeto mostrando las propiedades publicas del objeto.
(object) array  -> hace la operacion inversa, las claves son el nombre de la propiedad y el valor pues el valor de la propiedad.

get_class() devuelve la clase de un objeto.

Los espacios de nombre se representan usando la barra invertida. El espacio de nombre raiz es: \
Al principio de un fichero se pone: namespace X;
Esto significa que todo pertenece al espacio de nombre X.

para usar cosas de otros espacios de nombres:
para clases interfaces o rasgos: use
para constantes: use const
para funciones: use function
Los use llevan la barra raiz implicita (no hay que ponerla) porque en el use siempre se pone ruta absoluta.
En el caso de las funciones y constantes primero busca en el espacio de nombre actual y luego busca en el raiz,
por eso podemos llamar a funciones tipicas sin poner la barra raiz si estamos en otro espacio de nombre. Si en ese espacio defino una funcion
con ese mismo nombre, me pilla esa nueva porque es la primera que busca, y para llamar a la original hay que usar la barra raiz.

gestor de dependencias: composer
Para descargarlo tenemos estos comandos de getcomposer.com:
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
php -r "if (hash_file('sha384', 'composer-setup.php') === '906a84df04cea2aa72f40b5f787e49f22d4c2f19492ac310e8cba5b96ac8b64115ac402c8cd292b8a03482574915d1a8') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
php composer-setup.php
php -r "unlink('composer-setup.php');"

Luego es aconsejable:
Si no existe la carpeta, la creamos: mkdir -p ~/.local/bin 
luego ya lo movemos: mv composer.phar ~/.local/bin/composer


packagist.org es un repositorio con los paquetes de composer.

En la carpeta de nuestro proyecto ejecutamos el comando:
composer require mpdf/mpdf
Asi instalamos el paquete que queremos y los que dependen de él.
La carpeta vendor generada contiene los paquetes, esta carpeta se ignora en el git marcandola en el gitignore.
Esta carpeta se genera gracias al composer.lock cuando hagamos pull en otro pc. Y para ellos tenemos que ejecutar:
composer install


Para instalar los paquetes de php de Ricardo:
sudo apt install $(<lista_paquetes.txt )

Para cargar todas las clases automaticamente:
require 'vendor/autoload.php';

Con esto indicamos que es una dependencia solo de desarrollo:
composer require --dev 

Para instalar los paquetes en otro sitio luego:
composer install
composer install --no-dev (solo los de produccion)

php-fig (web donde estan las recomendaciones de las reglas de estilo de php)

psql -h localhost ...... < prueba.sql (ejecutas en la base de datos todos los comandos para crear la base de datos)


Preguntas si se envia por post:
if ($_SERVER['REQUEST_METHOD'] == 'POST) {   }


tipicos problemas que el framework resuelve:
1. rutas -> constante con ruta absoluta del sistema de ficheros a la carpeta principal (como cambies de pc hay que cambiarla tambien)
2. session_start() como no te acuerdes de ponerlo (en la primera linea), se pierde la sesion
3. repeticion de codigo en la plantilla
4. validacion de datos complejos, como las fechas y horas.
5. document root  (fallo de seguridad: todos tienen acceso a los archivos)
6. sql (si trabajamos directamente en sql, cada motor tiene matices diferentes)
7. mezclar html, php, sql, etc
8. hemos utilizado un estilo procedimental en vez de orientado a objetos


En tailwindscomponents hay codigo creado por otros que podemos usar.
Extension de code: Tailwind CSS IntelliSense

Una de las formas de instalar el laravel:
composer create-project laravel/laravel nombreProyecto
